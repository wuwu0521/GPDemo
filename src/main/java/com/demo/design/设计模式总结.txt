设计模式分类
	创建型:	工厂方法模式（Factory Method）、抽象工厂模式（Abstract Factory）、
			建造者模式（Builder）、原型模式（Prototype）、单例模式(Singleton)
			
	结构型 :	适配器模式(Adapter)、桥接模式（Bridge）、组合模式（Composite）、
			装饰器模式（Decorator）、门面模式（Facade）、享元模式（Flyweight）、
			代理模式（Proxy）
	行为型 :	解释器模式（Interpreter）、模板方法模式（Template Method）、
			责任链模式（Chain of Responsibility）、命令模式（Command）、
			迭代器模式（Iterator）、调解者模式（Mediator）、备忘录模式（Memento）、
			观察者模式（Observer）、状态模式（State）、策略模式（Strategy）、
			访问者模式（Visitor）
			
			
设计模式 总结
	工厂模式（Factory）:	 只对结果负责，封装创建过程。 BeanFactory、Calende
	单例模式（Singleton）:  保证独一无二。 ApplicationContext、Calender
	原型模式（Prototype） : (浅、深克隆)拔一根猴毛，吹出千万个。 ArrayList、PrototypeBean
	代理模式（Proxy） ：		找人办事，增强职责。 ProxyFactoryBean、JdkDynamicAopProxy、CglibAopProxy
	委派模式（Delegate）：	干活算你的（普通员工），功劳算我的（项目经理）。DispatcherServlet、BeanDefinitionParserDelegate
	策略模式（Strategy） ： 	用户选择，结果统一。 InstantiationStrategy
	模板模式（Template）：	 流程标准化，自己实现定制。 JdbcTemplate、HttpServlet
	适配器模式（Adapter） ：	 兼容转换头。 AdvisorAdapter、HandlerAdapter
	装饰器模式（Decorator）：	 包装，同宗同源。 BufferedReader、InputStream、咕泡出品，必属精品 www.gupaoedu.comOutputStream、HttpHeadResponseDecorator
	观察者模式（Observer）：	 任务完成时通知。 ContextLoaderListener
	
	
	
	